

SET NOCOUNT ON;

ALTER DATABASE master
SET CURSOR_DEFAULT LOCAL;

--TRIGGER 1: AFTER ADDING AN ITEM INTO TABLE SALEITEM, PRINT TOTAL MONEY OF THAT SALE ORDER
CREATE OR ALTER TRIGGER TOTAL_FOR_SALEORDER 
ON SALEITEM 
FOR INSERT, UPDATE, DELETE
AS
DECLARE @IDORDER INT;
DECLARE @TOTAL NUMERIC(20,2);
DECLARE @QUAN INT;
DECLARE @IDITEM INT;
DECLARE @P NUMERIC(6,2);
BEGIN
	SET @TOTAL = 0;
	SET @IDORDER = -1;

    IF EXISTS(SELECT * FROM INSERTED)
		SELECT @IDORDER = IDSALEORDER FROM INSERTED;
	ELSE
		IF EXISTS(SELECT * FROM DELETED)
			SELECT @IDORDER = IDSALEORDER FROM DELETED;
	
	IF @IDORDER != -1
	BEGIN	
		PRINT 'ORDER ' + CAST(@IDORDER AS VARCHAR);

		DECLARE FLO_CURSOR CURSOR LOCAL
		FOR SELECT IDFLOWER, SALEQUANTITY 
		FROM SALEITEM WHERE IDSALEORDER = @IDORDER;

		OPEN FLO_CURSOR;
		FETCH NEXT FROM FLO_CURSOR INTO @IDITEM, @QUAN
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SELECT @P = PRICE FROM FLOWER
			WHERE IDFLOWER = @IDITEM;
			SET @TOTAL = @TOTAL + @P * @QUAN;
			PRINT 'FLOWER ' + CAST(@IDITEM AS VARCHAR) + ': ' + CAST(@QUAN AS VARCHAR) 
					+ ' * ' + CAST(@P AS VARCHAR) + ' = ' + CAST(@QUAN * @P AS VARCHAR);

			FETCH NEXT FROM FLO_CURSOR INTO @IDITEM, @QUAN
		END; 
		CLOSE FLO_CURSOR;
		DEALLOCATE FLO_CURSOR;
		PRINT '';
		PRINT 'TOTAL FOR ORDER ' + CAST(@IDORDER AS VARCHAR) + ': ' + CAST(@TOTAL AS VARCHAR);
	END;
END;

DROP TRIGGER TOTAL_FOR_SALEORDER;

DELETE FROM SALEITEM WHERE IDSALEITEM = 3110;

INSERT INTO SALEITEM VALUES (3110, 3005, 4005, 10);

SELECT * FROM SALEITEM;

--///////////////////////////////////////////////////
--TRIGGER 2: AFTER INSERTING INTO PURCHASEITEM TABLE
--IF ITEM ALREADY EXISTS IN THAT PURCHASE, ROLL BACK

CREATE OR ALTER TRIGGER ADDING_PURCHASE_ITEM 
ON PURCHASEITEM
FOR INSERT
AS
DECLARE @NUM_ITEM INT;

DECLARE @ID_PURCHASE_ORDER INT;
DECLARE @INSERTED_FLOWER INT;
DECLARE @P INT;

BEGIN
	SELECT @ID_PURCHASE_ORDER = IDPURCHASE FROM INSERTED; 
	SELECT @INSERTED_FLOWER = IDFLOWER FROM INSERTED; 
	SELECT @P = PURCHASEPRICE FROM INSERTED;

	SELECT @NUM_ITEM = COUNT(*) 
	FROM PURCHASEITEM
	WHERE IDPURCHASE = @ID_PURCHASE_ORDER AND IDFLOWER = @INSERTED_FLOWER AND PURCHASEPRICE = @P;

	IF @NUM_ITEM > 1
	BEGIN
		PRINT 'CANNOT INSERT ITEM';
		PRINT 'FLOWER WITH ID ' + CAST(@INSERTED_FLOWER AS VARCHAR) + ' ALREADY EXISTED IN THAT PURCHASE ORDER';

		ROLLBACK;
	END;
END;

--CANNOT ADD
INSERT INTO PURCHASEITEM VALUES (5310, 5203, 4001,  7.00, 400);

SELECT * FROM PURCHASEITEM;

DROP TRIGGER ADDING_PURCHASE_ITEM;

--///////////////////////////////////////////////
--TRIGGER 3: CREATE TABLE SUMOFSALARY TO SAVE THE HISTORY OF CHANGING SALARY
--AFTER CHANGING EMPLOYEE INFORMATION, UPDATE NUMBER OF EMPLOYEES AND SUM OF SALARY IN TABLE SUMOFSALARY
CREATE OR ALTER TRIGGER UPDATE_EMP_HIST
ON EMPLOYEE
FOR INSERT, UPDATE, DELETE
AS
	DECLARE @NUM_EMP INT;
	DECLARE @SUMOFSAL INT;
	DECLARE @IDHIST INT;
BEGIN
	SELECT @NUM_EMP = COUNT(*), @SUMOFSAL = SUM(SALARY) FROM EMPLOYEE; 
	SELECT @IDHIST = ISNULL(MAX(IDEMPLOYEEHISTORY), 0) + 1 FROM EMPLOYEEHISTORY;
	INSERT INTO EMPLOYEEHISTORY VALUES (@IDHIST, GETDATE(),@NUM_EMP, @SUMOFSAL);

	PRINT 'TABLE EMPLOYEEHISTORY: ONE ROW INSERTED';
END;

INSERT INTO EMPLOYEE VALUES (2004, 'ALAN', 'PARK', CAST('1998-01-02' AS VARCHAR), 'MASZAKOWSKA 4', 'WA', '761 454 624', 2200);

DELETE FROM EMPLOYEE WHERE IDEMPLOYEE = 2004;

SELECT * FROM EMPLOYEEHISTORY;

DROP TABLE EMPLOYEEHISTORY;

CREATE TABLE EMPLOYEEHISTORY(
	IDEMPLOYEEHISTORY INT PRIMARY KEY,
	DATEOFUPDATING DATE,
	NUMBEROFEMPLOYEE INT, 
    SALARYSUM INT 
);

DROP TRIGGER UPDATE_EMP_HIST;

--//////////////////////////////////////////////////
--PROCEDURE 1: RESULT SET

CREATE OR ALTER PROCEDURE CUST_SALE_INFO @CUST INT
AS
SELECT IDSALEORDER, IDEMPLOYEE, DATEOFORDER
FROM SALEORDER
WHERE IDCUSTOMER = @CUST
ORDER BY DATEOFORDER DESC;

EXECUTE CUST_SALE_INFO 1003;

DROP PROCEDURE CUST_SALE_INFO;

--////////////////////////////////////////////
--PROCEDURE 2: RETURN
--FOR A SPECIFIC PERIOD, RETURN TOTAL COST OF ALL PURCHASES
ALTER DATABASE master
SET CURSOR_DEFAULT LOCAL;

CREATE OR ALTER PROCEDURE PURCHASE_INFO @STARTDATE DATE, @ENDDATE DATE 
AS
DECLARE @QUAN INT;
DECLARE @P INT;
DECLARE @TOTAL_COST INT;
BEGIN
	SET @TOTAL_COST = 0;

	IF @STARTDATE > @ENDDATE
	BEGIN
		PRINT 'START DATE SHOULD BE SMALLER THAN END DATE';
	END;
	ELSE
	BEGIN
		DECLARE ALL_ITEMS_CURSOR CURSOR LOCAL
			FOR SELECT PURCHASEPRICE, QUANTITY 
			FROM PURCHASEITEM I JOIN PURCHASE P ON I.IDPURCHASE = P.IDPURCHASE
			WHERE DATEOFPURCHASE BETWEEN @STARTDATE AND @ENDDATE;

		OPEN ALL_ITEMS_CURSOR;
		FETCH NEXT FROM ALL_ITEMS_CURSOR INTO @P, @QUAN;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			PRINT CAST(@QUAN AS VARCHAR) + ' * ' + CAST(@P AS VARCHAR) + ' = ' + CAST(@P * @QUAN AS VARCHAR);
			SET @TOTAL_COST = @TOTAL_COST + @P * @QUAN;
			FETCH NEXT FROM ALL_ITEMS_CURSOR INTO @P, @QUAN;
		END; 
		CLOSE ALL_ITEMS_CURSOR;
		DEALLOCATE ALL_ITEMS_CURSOR;
	END;

	RETURN @TOTAL_COST;
END;

BEGIN
	DECLARE @COST INT = 0;
	DECLARE @START DATE = '2018-03-04';
	DECLARE @END DATE = '2018-04-01';
	EXECUTE @COST = PURCHASE_INFO @START, @END;

	PRINT 'PERIOD: ' + CAST(@START AS VARCHAR) + ' TO ' + CAST(@END AS VARCHAR);
	PRINT 'TOTAL COST: ' + CAST(@COST AS VARCHAR);

	SELECT IDPURCHASEITEM, PURCHASEPRICE, QUANTITY 
	FROM PURCHASEITEM I JOIN PURCHASE P ON I.IDPURCHASE = P.IDPURCHASE
	WHERE DATEOFPURCHASE BETWEEN @START AND @END;
END;



DROP PROCEDURE PURCHASE_INFO;


--///////////////////////////////////////////////////////////
--PROCEDURE 3:  OUTPUT
--FIND CUSTCARD WITH THE HIGHEST DISCOUNT FOR A CUSTOMER (CUSTCARD IS NOT EXPIRED)
ALTER DATABASE master
SET CURSOR_DEFAULT LOCAL;

CREATE PROCEDURE TOTAL_FOR_CUSTOMER @CUST INT, @IDCARD INT OUTPUT, @DISCOUNT INT OUTPUT
AS
BEGIN
	DECLARE @TEMP_DISCOUNT INT;
	DECLARE @TEMP_CARD INT;

	DECLARE ALL_CARDS_CURSOR CURSOR LOCAL
		FOR SELECT IDCARD, DISCOUNT 
		FROM CUSTCARD C JOIN LOYALTYCARD L ON C.TYPEOFCARD = L.TYPEOFCARD 
		WHERE C.IDCUSTOMER = @CUST AND C.DATEOFEXPIRE > GETDATE();

	SET @DISCOUNT = 0;
	SET @IDCARD = 0;

	OPEN ALL_CARDS_CURSOR;
	FETCH NEXT FROM ALL_CARDS_CURSOR INTO @TEMP_CARD, @TEMP_DISCOUNT;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @TEMP_DISCOUNT > @DISCOUNT
			BEGIN
				SET @IDCARD = @TEMP_CARD;
				SET @DISCOUNT = @TEMP_DISCOUNT;
			END;
			FETCH NEXT FROM ALL_CARDS_CURSOR INTO @TEMP_CARD, @TEMP_DISCOUNT;
		END;
	CLOSE ALL_CARDS_CURSOR;
	DEALLOCATE ALL_CARDS_CURSOR;
END;

BEGIN
	DECLARE @ID_CARD INT, @MAX_DISCOUNT INT;
	EXECUTE TOTAL_FOR_CUSTOMER 1001, @ID_CARD OUTPUT, @MAX_DISCOUNT OUTPUT;
	PRINT 'CUSTOMER: 1001'
	PRINT 'CARD NUMBER: ' + CAST(@ID_CARD AS VARCHAR);
	PRINT 'DISCOUNT: ' + CAST(@MAX_DISCOUNT AS VARCHAR) + '%';
END;

SELECT MAX(DISCOUNT) 
FROM CUSTCARD C JOIN LOYALTYCARD L ON C.TYPEOFCARD = L.TYPEOFCARD 
WHERE C.IDCUSTOMER = 1001 AND C.DATEOFEXPIRE > GETDATE();

DROP PROCEDURE TOTAL_FOR_CUSTOMER;

--///////////////////////////////////////////////
--FUNCTION: CALCULATE THE INVOICE FOR AN IDSALEORDER


CREATE OR ALTER FUNCTION DBO.INVOICE(@IDORDER INT)
RETURNS INT
AS
BEGIN
	DECLARE @TOTAL INT;
	SET @TOTAL = 0;

	SELECT @TOTAL = SALEQUANTITY * PRICE
	FROM SALEITEM SI, FLOWER F
	WHERE SI.IDFLOWER = F.IDFLOWER AND SI.IDSALEORDER = @IDORDER;

	RETURN @TOTAL;
END;

PRINT 'TOTAL MONEY FOR SALE ORDER 3001: ' + CAST(DBO.INVOICE(3001) AS VARCHAR) + 'PLN';

SELECT IDSALEORDER, SALEQUANTITY, PRICE 
FROM SALEITEM SI, FLOWER F
WHERE SI.IDFLOWER = F.IDFLOWER AND SI.IDSALEORDER = 3001;

DROP FUNCTION DBO.INVOICE;


