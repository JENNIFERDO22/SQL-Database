
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD'; 
SET SERVEROUT ON;

--PROCEDURE 1: 
--IF ANY EMPLOYEE EARNS LESS THAN 2100, INCREASE HIS SALARY BY 1100 PLN
--EXCEPTION: IF EVERYONE HAS ALREADY SAL >= 2100, RAISE NO_EMP EXCEPTION

CREATE OR REPLACE PROCEDURE CHANGE_MIN_SAL_PROCEDURE
AS
    CURSOR SAL_LESS_THAN_2100 
    IS
        SELECT * FROM EMPLOYEE 
        WHERE SALARY < 2100;
    X EMPLOYEE%ROWTYPE;
    N INT;
    
    NO_EMP EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO N
    FROM EMPLOYEE
    WHERE SALARY < 2100;
    
    IF N = 0
    THEN 
        RAISE NO_EMP;
    ELSE
    OPEN SAL_LESS_THAN_2100;
        LOOP
            FETCH SAL_LESS_THAN_2100 INTO X;
            EXIT WHEN SAL_LESS_THAN_2100%NOTFOUND;
            UPDATE EMPLOYEE
            SET SALARY = X.SALARY + 1100
            WHERE IDEMPLOYEE = X.IDEMPLOYEE;  
        END LOOP;
    
    COMMIT;
    CLOSE SAL_LESS_THAN_2100;
    END IF;
    
    EXCEPTION
    WHEN NO_EMP THEN DBMS_OUTPUT.PUT_LINE('NO SALARY CHANGED. EVERY EMPLOYEE ALREADY HAS SALARY GREATER THAN 2100');
END;
/

SELECT * FROM EMPLOYEE;

EXECUTE CHANGE_MIN_SAL_PROCEDURE;
----------------------------------------------------------

--PROCEDURE 2: FREE SHIP FOR ALL ORDERS IN A PERIOD

CREATE OR REPLACE PROCEDURE FREESHIP(STARTDATE DATE, ENDDATE DATE)
AS
    CURSOR FIND_ORDER IS
        SELECT * FROM SALEORDER
        WHERE DATEOFORDER BETWEEN STARTDATE AND ENDDATE;
    X FIND_ORDER%ROWTYPE;
    
    INVALID_START_DATE EXCEPTION;
    INVALID_END_DATE EXCEPTION;
BEGIN
    IF STARTDATE < SYSDATE() - 30 OR STARTDATE > SYSDATE() + 30
    THEN
        RAISE INVALID_START_DATE;
    ELSE 
    IF ENDDATE < STARTDATE
        THEN 
            RAISE INVALID_END_DATE;
        ELSE
            OPEN FIND_ORDER;
            LOOP
                FETCH FIND_ORDER INTO X;
                EXIT WHEN FIND_ORDER%NOTFOUND;
                UPDATE SALEORDER
                SET SHIPFEE = 0 
                WHERE IDSALEORDER = X.IDSALEORDER;
            END LOOP;
            COMMIT;
            CLOSE FIND_ORDER;
        END IF;
    END IF;
    
    EXCEPTION 
    WHEN INVALID_START_DATE THEN DBMS_OUTPUT.PUT_LINE('THE START DATE SHOULD BE AT LEAST 30 DAYS AGO OR AT MOST 30 DAYS LATER');
    WHEN INVALID_END_DATE THEN DBMS_OUTPUT.PUT_LINE('THE END DATE SHOULD BE GREATER THAN THE START DATE');
END;
/

--OK
INSERT INTO SaleOrder VALUES (3006, 1001, 2001, TO_DATE('2019-01-01'), TO_DATE('2019-01-05'), 10.00, 'Wilanowska 10', 'WA');

EXECUTE FREESHIP(TO_DATE('2019-01-01'),TO_DATE('2019-01-15'));

SELECT * FROM SALEORDER;

DELETE FROM SALEORDER
WHERE IDSALEORDER = 3006;

--EXCEPTION: INVALID_START_DATE 
EXECUTE FREESHIP(TO_DATE('2018-01-01'),TO_DATE('2019-01-15'));

--EXCEPTION: INVALID_END_DATE 
EXECUTE FREESHIP(TO_DATE('2019-01-01'),TO_DATE('2018-12-30'));

----------------------------------------------------------

--PROCEDURE 3: FOR AN IDSUPPIER, PRINT NAME AND QUANTITIES OF ITEMS WE BOUGHT 
CREATE OR REPLACE PROCEDURE SUPPLIER_QUANTITY(IDSUP INT)
AS
    CURSOR FIND_PURCHASES IS
        SELECT IDPURCHASE FROM PURCHASE
        WHERE IDSUPPLIER = IDSUP;
    CURSOR FIND_QUANTITIES(IDPUR INT) IS
        SELECT QUANTITY FROM PURCHASEITEM
        WHERE IDPURCHASE = IDPUR;
    IDP INT;
    QUAN INT;
    TOTAL INT;
    SNAME VARCHAR(100);
    X INT;
    
    NO_SUP EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO X
    FROM SUPPLIER
    WHERE IDSUPPLIER = IDSUP;
    
    IF X = 0
    THEN 
        RAISE NO_SUP;     
    ELSE
        SELECT SUPNAME INTO SNAME
        FROM SUPPLIER
        WHERE IDSUPPLIER = IDSUP;
        
        TOTAL := 0;
        OPEN FIND_PURCHASES;
        
        LOOP
            FETCH FIND_PURCHASES INTO IDP;
            EXIT WHEN FIND_PURCHASES%NOTFOUND;
            OPEN FIND_QUANTITIES(IDP);
            LOOP
                FETCH FIND_QUANTITIES INTO QUAN;
                EXIT WHEN FIND_QUANTITIES%NOTFOUND;
                TOTAL := TOTAL + QUAN;
            END LOOP;
            CLOSE FIND_QUANTITIES;
        END LOOP;
        
        COMMIT;
        CLOSE FIND_PURCHASES;
        
        DBMS_OUTPUT.PUT_LINE('SUPPLIER NAME: ' || SNAME);
        DBMS_OUTPUT.PUT_LINE('QUANTITY: ' || TOTAL);
    END IF;    
    
    EXCEPTION
    WHEN NO_SUP THEN DBMS_OUTPUT.PUT_LINE('NO SUPPLIER WITH ID '|| IDSUP);
END;
/

--OK
EXECUTE SUPPLIER_QUANTITY(5001);

--EXCEPTION: NO_SUP
EXECUTE SUPPLIER_QUANTITY(5009);
---------------------------------------------

--FUNCTION: CALCULATE INVOICE FOR A SALEORDER (INCLUDING SHIPPING FEE)
CREATE OR REPLACE FUNCTION INVOICE_WITH_SHIP (IDORDER IN INT)
RETURN NUMBER
IS
    CURSOR SEARCH_ITEMS IS
        SELECT IDFLOWER, SALEQUANTITY FROM SALEITEM
        WHERE IDSALEORDER = IDORDER;
    X SEARCH_ITEMS%ROWTYPE;
    P NUMBER(6,2);
    INVOICE NUMBER(6,2);
    
    NO_ORDER EXCEPTION;
    COUNTER INT;
BEGIN
    INVOICE := 0;
    SELECT COUNT(*) INTO COUNTER FROM SALEITEM WHERE IDSALEORDER = IDORDER;
    
    IF COUNTER = 0
    THEN
        RAISE NO_ORDER;
    ELSE
    BEGIN
    OPEN SEARCH_ITEMS;
    LOOP
        FETCH SEARCH_ITEMS INTO X;
        EXIT WHEN SEARCH_ITEMS%NOTFOUND;
        SELECT PRICE INTO P
        FROM FLOWER
        WHERE IDFLOWER = X.IDFLOWER;
        INVOICE := INVOICE + (P*X.SALEQUANTITY);
    END LOOP;
    END;
    END IF;
    RETURN INVOICE;
    
    EXCEPTION
    WHEN NO_ORDER THEN DBMS_OUTPUT.PUT_LINE('NO ORDER WITH ID '|| IDORDER);
END;
/

DECLARE
    INVOICE NUMBER(6,2) := 0;
BEGIN
    INVOICE := INVOICE_WITH_SHIP(3001);
    DBMS_OUTPUT.PUT_LINE('INVOICE: ' || INVOICE);
END;
/
--------------------------------------------------------

--TRIGGER EXECUTING PROCEDURE: BEFORE INSERTING A NEW SALE ORDER FOR A CUSTOMER, CHECK IF HE HAS A CUSTOMER CARD
-- IF SO, CHECK IF HIS CUSTOMER CARD HAS BEEN EXPIRED
-- IF IT IS EXPIRED, REMOVE IT FROM TABLE CUSTCARD

CREATE TABLE CARDHISTORY(
    IdCard INT PRIMARY KEY,
    TypeOfCard varchar2(50) REFERENCES LoyaltyCard(TypeOfCard),
    IdCustomer INT REFERENCES Customer(IdCustomer),
    DateOfIssue date,
    DateOfExpire date
);

CREATE OR REPLACE PROCEDURE EXPIRED_CUSTCARD_PROCEDURE(CUST INT)
AS
    CURSOR FIND_CUSTCARD 
    IS
        SELECT * FROM CUSTCARD
        WHERE IDCUSTOMER = CUST AND DATEOFEXPIRE < SYSDATE();
    X CUSTCARD%ROWTYPE;
    N INT;
    
    NO_CARD EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO N
    FROM CUSTCARD
    WHERE IDCUSTOMER = CUST AND DATEOFEXPIRE < SYSDATE();

    IF N = 0
    THEN 
        RAISE NO_CARD;
    ELSE
    OPEN FIND_CUSTCARD;
        LOOP 
            FETCH FIND_CUSTCARD INTO X;
            EXIT WHEN FIND_CUSTCARD%NOTFOUND; 
            DBMS_OUTPUT.PUT_LINE('1 CARD FOR THIS CUSTOMER IS EXPIRED');
            INSERT INTO CARDHISTORY
            VALUES (X.IDCARD, X.TYPEOFCARD, X.IDCUSTOMER, X.DATEOFISSUE, X.DATEOFEXPIRE);
            DELETE FROM CUSTCARD
            WHERE IDCARD = X.IDCARD;
        END LOOP;
    CLOSE FIND_CUSTCARD;
    END IF;
    
    EXCEPTION
    WHEN NO_CARD THEN DBMS_OUTPUT.PUT_LINE('NO EXPIRED CARD FOR THIS CUSTOMER');     
END;
/

CREATE OR REPLACE TRIGGER ADD_SALE_ORDER_TRIGGER
BEFORE INSERT ON SALEORDER
FOR EACH ROW
BEGIN
    EXPIRED_CUSTCARD_PROCEDURE(:NEW.IDCUSTOMER);
END;
/

INSERT INTO CustCard VALUES (1101, 'Bronze', 1001, TO_DATE('2018-01-01'), TO_DATE('2020-01-01'));
INSERT INTO CustCard VALUES (1105, 'Bronze', 1001, TO_DATE('2018-01-01'), TO_DATE('2018-02-01'));

EXECUTE EXPIRED_CUSTCARD_PROCEDURE(1001);

SELECT * FROM CUSTCARD;
SELECT * FROM CARDHISTORY;
SELECT * FROM SALEORDER;

INSERT INTO SaleOrder 
VALUES (3010, 1001, 2002, TO_DATE('2019-01-07'), TO_DATE('2019-04-22'), 10.00, 'Wilanowska 10', 'WA');

DELETE FROM CARDHISTORY;
DELETE FROM SALEORDER WHERE IDSALEORDER = 3008;
--------------------------------------------





ALTER TABLE Supplier DROP COLUMN SupCity;
ALTER TABLE Purchase DROP COLUMN IdSupplier;
ALTER TABLE Purchase DROP COLUMN IdStatus;
ALTER TABLE PurchaseItem DROP COLUMN IdPurchase;
ALTER TABLE PurchaseItem DROP COLUMN IdFlower;
DROP TABLE  LoyaltyCard;
DROP TABLE  City;
DROP TABLE  Customer;
DROP TABLE  CustCard;
DROP TABLE  Employee;
DROP TABLE  SaleOrder;
DROP TABLE  Color;
DROP TABLE  Flower;
DROP TABLE  SaleItem;
DROP TABLE  Supplier;
DROP TABLE  DeliveryStatus;
DROP TABLE  Purchase;
DROP TABLE  PurchaseItem;

-----------------------------------------------

--CREATES TABLES 

CREATE TABLE LoyaltyCard (
    TypeOfCard varchar2(50) PRIMARY KEY,
    Discount INT
);

INSERT INTO LoyaltyCard VALUES ('Bronze', 5);
INSERT INTO LoyaltyCard VALUES ('Silver', 7);
INSERT INTO LoyaltyCard VALUES ('Gold', 10);

CREATE TABLE City (
    IdCity varchar2(10) PRIMARY KEY,
    City varchar2(40)
);

INSERT INTO City VALUES('WA', 'Warsaw');
INSERT INTO City VALUES('KR', 'Krakow');
INSERT INTO City VALUES('WR', 'Wroclaw');

CREATE TABLE Customer (
    IdCustomer INT PRIMARY KEY,
    CustName varchar2(100),
    CustSurname varchar2(100),
    CustAddress varchar2(400),
    CustCity varchar2(10) REFERENCES City (IdCity),
    CustPhoneNo varchar2(20)
);

INSERT INTO Customer VALUES (1001, 'Anna', 'Smith', 'Sasanki 1', 'WA', '729 382 392');
INSERT INTO Customer VALUES (1002, 'Asia', 'Brown', 'Koszykowa 2', 'WA', '123 523 432');
INSERT INTO Customer VALUES (1003, 'Gosia', 'Miller', 'Wawelska 3', 'WA', '543 322 342');
INSERT INTO Customer VALUES (1004, 'Jakub', 'Johnson', 'Wronia 4', 'WA', '876 423 458');
INSERT INTO Customer VALUES (1005, 'Leon', 'Jones', 'Marszalkowska 5', 'WA', '765 324 542');
INSERT INTO Customer VALUES (1006, 'Dawid', 'Davis', 'Krakusa 6', 'KR', '343 432 543');
INSERT INTO Customer VALUES (1007, 'Philip', 'Williams', 'Celna 7', 'KR', '654 342 543');
INSERT INTO Customer VALUES (1008, 'Joanna', 'Wilson', 'Rybaki 8', 'KR', '729 423 134');
INSERT INTO Customer VALUES (1009, 'Julia', 'Smith', 'Ruska 9', 'WR', '729 452 543');

CREATE TABLE CustCard (
    IdCard INT PRIMARY KEY,
    TypeOfCard varchar2(50) REFERENCES LoyaltyCard(TypeOfCard),
    IdCustomer INT REFERENCES Customer(IdCustomer),
    DateOfIssue date,
    DateOfExpire date
);

INSERT INTO CustCard VALUES (1101, 'Bronze', 1001, TO_DATE('2018-01-01'), TO_DATE('2020-01-01'));
INSERT INTO CustCard VALUES (1102, 'Silver', 1002, TO_DATE('2018-02-01'), TO_DATE('2023-02-01'));
INSERT INTO CustCard VALUES (1103, 'Gold', 1003, TO_DATE('2018-01-01'), TO_DATE('2023-01-01'));

CREATE TABLE Employee (
    IdEmployee INT PRIMARY KEY,
    EmpName varchar2(100),
    EmpSurname varchar2(100),
    EmpDateOfBirth date,
    EmpAddress varchar2(400),
    EmpCity varchar2(10) REFERENCES City (IdCity),
    EmpPhoneNo varchar2(20),
    Salary INT
) ;

INSERT INTO Employee VALUES (2001, 'Taras', 'Smith', TO_DATE('1995-02-03'), 'Wilanowska 3', 'WA', '234 453 234', 1000);
INSERT INTO Employee VALUES (2002, 'Anna', 'Jones', TO_DATE('1993-04-03'), 'Centrum 1', 'WA', '243 421 434', 1200);
INSERT INTO Employee VALUES (2003, 'Zuzanka', 'Brown', TO_DATE('1996-01-02'), 'Sluzew 4', 'WA', '765 453 684', 1000);

CREATE TABLE SaleOrder (
    IdSaleOrder INT PRIMARY KEY,
    IdCustomer INT REFERENCES Customer (IdCustomer),
    IdEmployee INT REFERENCES Employee (IdEmployee),
    DateOfOrder date,
    DateOfReceive date,
    ShipFee number(6,2) NULL,
    ShipAddress varchar2(200) NULL,
    IdShipCity varchar2(10) REFERENCES City (IdCity)
) ;

INSERT INTO SaleOrder VALUES (3001, 1001, 2001, TO_DATE('2018-05-28'), TO_DATE('2018-06-01'), 10.00, 'Wilanowska 10', 'WA');
INSERT INTO SaleOrder VALUES (3002, 1003, 2001, TO_DATE('2018-05-20'), TO_DATE('2018-06-02'), 0, NULL, 'WA');
INSERT INTO SaleOrder VALUES (3003, 1003, 2001, TO_DATE('2018-05-21'), TO_DATE('2018-06-03'), 10.00, 'Centrum 3', 'WA');
INSERT INTO SaleOrder VALUES (3004, 1003, 2001, TO_DATE('2018-05-12'), TO_DATE('2018-05-28'), 20.00, 'Chmiela 8', 'WA');
INSERT INTO SaleOrder VALUES (3005, 1003, 2001, TO_DATE('2018-06-01'), TO_DATE('2018-06-04'), 15.00, 'Koszykowa 86', 'WA');

CREATE TABLE Color (
    IdColor INT  PRIMARY KEY,
    Color varchar2(40)
) ;

INSERT INTO Color VALUES (4101, 'White');
INSERT INTO Color VALUES (4102, 'Red');
INSERT INTO Color VALUES (4103, 'Yellow');
INSERT INTO Color VALUES (4104, 'Purple');

CREATE TABLE Flower (
    IdFlower INT PRIMARY KEY,
    IdColor INT REFERENCES Color (IdColor),
    FlowerName varchar2(100),
    Price number(6,2)
) ;

INSERT INTO Flower VALUES (4001, 4101, 'Daisy', 10.00);
INSERT INTO Flower VALUES (4002, 4101, 'Aster', 12.00);
INSERT INTO Flower VALUES (4003, 4102, 'Rose', 8.00);
INSERT INTO Flower VALUES (4004, 4103, 'Sun Flower', 10.00);
INSERT INTO Flower VALUES (4005, 4104, 'Aster', 10.00);

CREATE TABLE SaleItem (
    IdSaleItem INT PRIMARY KEY,
    IdSaleOrder INT REFERENCES SaleOrder (IdSaleOrder),
    IdFlower INT REFERENCES Flower (IdFlower),
    SaleQuantity INT 
) ;

INSERT INTO SaleItem VALUES (3101, 3001, 4001, 10);
INSERT INTO SaleItem VALUES (3102, 3001, 4002, 50);
INSERT INTO SaleItem VALUES (3103, 3001, 4003, 10);

INSERT INTO SaleItem VALUES (3104, 3002, 4003, 30);
INSERT INTO SaleItem VALUES (3105, 3002, 4002, 20);
INSERT INTO SaleItem VALUES (3106, 3002, 4005, 10);

INSERT INTO SaleItem VALUES (3107, 3003, 4002, 50);

INSERT INTO SaleItem VALUES (3108, 3004, 4001, 100);

INSERT INTO SaleItem VALUES (3109, 3005, 4003, 40);

CREATE TABLE Supplier (
    IdSupplier INT PRIMARY KEY,
    SupName varchar2(100),
    SupPhoneNo varchar2(20),
    SupAddress varchar2(100),
    SupCity varchar2(10) REFERENCES City(IdCity),
    SupEmail varchar2(100)
) ;

INSERT INTO Supplier VALUES (5001, 'ABC Company', '323 341 342', 'Pokoju 91', 'KR', 'abccompany@gmail.com');
INSERT INTO Supplier VALUES (5002, 'WE Company', '348 594 442', 'Grodzka 9', 'WR', 'wecompany@gmail.com');
INSERT INTO Supplier VALUES (5003, 'Flower Company', '524 542 245', 'Bananowa 8', 'WA', 'flowercompany@gmail.com');

CREATE TABLE DeliveryStatus (
    IdStatus INT PRIMARY KEY,
    Status varchar2(400)
) ;

INSERT INTO DeliveryStatus VALUES (5101, 'Delivering');
INSERT INTO DeliveryStatus VALUES (5102, 'Delayed');
INSERT INTO DeliveryStatus VALUES (5103, 'Received');

CREATE TABLE Purchase (
    IdPurchase INT PRIMARY KEY,
    IdSupplier INT  REFERENCES Supplier (IdSupplier),
    DateOfPurchase date,
    DateOfDelivery date,
    IdStatus INT REFERENCES DeliveryStatus (IdStatus)
) ;

INSERT INTO Purchase VALUES (5201, 5001, TO_DATE('2018-03-04'), TO_DATE('2018-03-14'), 5103);
INSERT INTO Purchase VALUES (5202, 5002, TO_DATE('2018-06-04'), TO_DATE('2018-06-10'), 5102);
INSERT INTO Purchase VALUES (5203, 5003, TO_DATE('2018-06-10'), TO_DATE('2018-06-20'), 5101);

CREATE TABLE PurchaseItem (
    IdPurchaseItem INT PRIMARY KEY,
    IdPurchase INT REFERENCES Purchase (IdPurchase),
    IdFlower INT REFERENCES Flower (IdFlower),
    PurchasePrice INT,
    Quantity INT
);

INSERT INTO PurchaseItem VALUES (5301, 5201, 4001,  5.00, 1000);
INSERT INTO PurchaseItem VALUES (5302, 5201, 4002,  8.00, 1000);
INSERT INTO PurchaseItem VALUES (5303, 5201, 4003,  6.00, 500);

INSERT INTO PurchaseItem VALUES (5304, 5202, 4004,  6.00, 500);
INSERT INTO PurchaseItem VALUES (5305, 5202, 4005,  7.00, 1000);
INSERT INTO PurchaseItem VALUES (5306, 5202, 4001,  6.00, 500);

INSERT INTO PurchaseItem VALUES (5307, 5203, 4003,  6.00, 1000);
INSERT INTO PurchaseItem VALUES (5308, 5203, 4002,  7.00, 1000);

-----------------------------------------------

SET SERVEROUT ON;

--PROCEDURE 1: THE MINIMUM SALARY IN POLAND HAS BEEN CHANGED TO 2100 PLN
-- OLD MIN SALARY IS 1000 PLN
-- MIN SAL HAS BEEN INCREASE BY 1100 PLN
--IF ANY EMPLOYEE EARNS LESS THAN 2100, INCREASE HIS SALARY BY 1100 PLN
--EXCEPTION: IF EVERYONE HAS ALREADY SAL >= 2100, RAISE NO_EMP EXCEPTION

CREATE OR REPLACE PROCEDURE CHANGE_MIN_SAL_PROCEDURE
AS
    CURSOR SAL_LESS_THAN_2100 
    IS
        SELECT * FROM EMPLOYEE 
        WHERE SALARY < 2100;
    X EMPLOYEE%ROWTYPE;
    N INT;
    NO_EMP EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO N
    FROM EMPLOYEE
    WHERE SALARY < 2100;
    
    IF N = 0
    THEN 
        RAISE NO_EMP;
    ELSE
    OPEN SAL_LESS_THAN_2100;
        LOOP
            FETCH SAL_LESS_THAN_2100 INTO X;
            EXIT WHEN SAL_LESS_THAN_2100%NOTFOUND;
            UPDATE EMPLOYEE
            SET SALARY = X.SALARY + 1100
            WHERE IDEMPLOYEE = X.IDEMPLOYEE;  
        END LOOP;
    
    COMMIT;
    CLOSE SAL_LESS_THAN_2100;
    END IF;
    
    EXCEPTION
    WHEN NO_EMP THEN DBMS_OUTPUT.PUT_LINE('NO SALARY CHANGED. EVERY EMPLOYEE ALREADY HAS SALARY GREATER THAN 2100');
END;
/

SELECT * FROM EMPLOYEE;

EXECUTE CHANGE_MIN_SAL_PROCEDURE;
----------------------------------------------------------

--PROCEDURE 2: FREE SHIP FOR ALL ORDERS IN A PERIOD

CREATE OR REPLACE PROCEDURE FREESHIP(STARTDATE DATE, ENDDATE DATE)
AS
    CURSOR FIND_ORDER IS
        SELECT * FROM SALEORDER
        WHERE DATEOFORDER BETWEEN STARTDATE AND ENDDATE;
    X FIND_ORDER%ROWTYPE;
    INVALID_START_DATE EXCEPTION;
    INVALID_END_DATE EXCEPTION;
BEGIN
    IF STARTDATE < SYSDATE() - 30 OR STARTDATE > SYSDATE() + 30
    THEN
        RAISE INVALID_START_DATE;
    ELSE 
    IF ENDDATE < STARTDATE
        THEN 
            RAISE INVALID_END_DATE;
        ELSE
            OPEN FIND_ORDER;
            LOOP
                FETCH FIND_ORDER INTO X;
                EXIT WHEN FIND_ORDER%NOTFOUND;
                UPDATE SALEORDER
                SET SHIPFEE = 0 
                WHERE IDSALEORDER = X.IDSALEORDER;
            END LOOP;
            COMMIT;
            CLOSE FIND_ORDER;
        END IF;
    END IF;
    
    EXCEPTION 
    WHEN INVALID_START_DATE THEN DBMS_OUTPUT.PUT_LINE('THE START DATE SHOULD BE AT LEAST 30 DAYS AGO OR AT MOST 30 DAYS LATER');
    WHEN INVALID_END_DATE THEN DBMS_OUTPUT.PUT_LINE('THE END DATE SHOULD BE GREATER THAN THE START DATE');
END;
/

--OK
INSERT INTO SaleOrder VALUES (3006, 1001, 2001, TO_DATE('2019-01-01'), TO_DATE('2019-01-05'), 10.00, 'Wilanowska 10', 'WA');

EXECUTE FREESHIP(TO_DATE('2019-01-01'),TO_DATE('2019-01-15'));

SELECT * FROM SALEORDER;

DELETE FROM SALEORDER
WHERE IDSALEORDER = 3006;

--EXCEPTION: INVALID_START_DATE 
EXECUTE FREESHIP(TO_DATE('2018-01-01'),TO_DATE('2019-01-15'));

--EXCEPTION: INVALID_END_DATE 
EXECUTE FREESHIP(TO_DATE('2019-01-01'),TO_DATE('2018-12-30'));

----------------------------------------------------------

--PROCEDURE 3: FOR AN IDSUPPIER, PRINT NAME AND QUANTITIES OF ITEMS WE BOUGHT 
CREATE OR REPLACE PROCEDURE SUPPLIER_QUANTITY(IDSUP INT)
AS
    CURSOR FIND_PURCHASES IS
        SELECT IDPURCHASE FROM PURCHASE
        WHERE IDSUPPLIER = IDSUP;
    CURSOR FIND_QUANTITIES(IDPUR INT) IS
        SELECT QUANTITY FROM PURCHASEITEM
        WHERE IDPURCHASE = IDPUR;
    IDP INT;
    QUAN INT;
    TOTAL INT;
    SNAME VARCHAR(100);
    X INT;
    
    NO_SUP EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO X
    FROM SUPPLIER
    WHERE IDSUPPLIER = IDSUP;
    
    IF X = 0
    THEN 
        RAISE NO_SUP;     
    ELSE
        SELECT SUPNAME INTO SNAME
        FROM SUPPLIER
        WHERE IDSUPPLIER = IDSUP;
        
        TOTAL := 0;
        OPEN FIND_PURCHASES;
        
        LOOP
            FETCH FIND_PURCHASES INTO IDP;
            EXIT WHEN FIND_PURCHASES%NOTFOUND;
            OPEN FIND_QUANTITIES(IDP);
            LOOP
                FETCH FIND_QUANTITIES INTO QUAN;
                EXIT WHEN FIND_QUANTITIES%NOTFOUND;
                TOTAL := TOTAL + QUAN;
            END LOOP;
            CLOSE FIND_QUANTITIES;
        END LOOP;
        
        COMMIT;
        CLOSE FIND_PURCHASES;
        
        DBMS_OUTPUT.PUT_LINE('SUPPLIER NAME: ' || SNAME);
        DBMS_OUTPUT.PUT_LINE('QUANTITY: ' || TOTAL);
    END IF;    
    
    EXCEPTION
    WHEN NO_SUP THEN DBMS_OUTPUT.PUT_LINE('NO SUPPLIER WITH ID '|| IDSUP);
END;
/

--OK
EXECUTE SUPPLIER_QUANTITY(5001);

--EXCEPTION: NO_SUP
EXECUTE SUPPLIER_QUANTITY(5009);
---------------------------------------------

--FUNCTION: CALCULATE INVOICE FOR A SALEORDER (INCLUDING SHIPPING FEE)
CREATE OR REPLACE FUNCTION INVOICE_WITH_SHIP (IDORDER IN INT)
RETURN NUMBER
IS
    CURSOR SEARCH_ITEMS IS
        SELECT IDFLOWER, SALEQUANTITY FROM SALEITEM
        WHERE IDSALEORDER = IDORDER;
    X SEARCH_ITEMS%ROWTYPE;
    P NUMBER(6,2);
    INVOICE NUMBER(6,2);
BEGIN
    INVOICE := 0;
    OPEN SEARCH_ITEMS;
    LOOP
        FETCH SEARCH_ITEMS INTO X;
        EXIT WHEN SEARCH_ITEMS%NOTFOUND;
        SELECT PRICE INTO P
        FROM FLOWER
        WHERE IDFLOWER = X.IDFLOWER;
        INVOICE := INVOICE + (P*X.SALEQUANTITY);
    END LOOP;
    RETURN INVOICE;
END;
/

DECLARE
    INVOICE NUMBER(6,2) := 0;
BEGIN
    INVOICE := INVOICE_WITH_SHIP(3001);
    DBMS_OUTPUT.PUT_LINE('INVOICE: ' || INVOICE);
END;
/
--------------------------------------------------------

--TRIGGER EXECUTING PROCEDURE: BEFORE INSERTING A NEW SALE ORDER FOR A CUSTOMER, CHECK IF HE HAS A CUSTOMER CARD
-- IF SO, CHECK IF HIS CUSTOMER CARD HAS BEEN EXPIRED
-- IF IT IS EXPIRED, REMOVE IT FROM TABLE CUSTCARD

CREATE TABLE CARDHISTORY(
    IdCard INT PRIMARY KEY,
    TypeOfCard varchar2(50) REFERENCES LoyaltyCard(TypeOfCard),
    IdCustomer INT REFERENCES Customer(IdCustomer),
    DateOfIssue date,
    DateOfExpire date
);

CREATE OR REPLACE PROCEDURE EXPIRED_CUSTCARD_PROCEDURE(CUST INT)
AS
    CURSOR FIND_CUSTCARD 
    IS
        SELECT * FROM CUSTCARD
        WHERE IDCUSTOMER = CUST AND DATEOFEXPIRE < SYSDATE();
    X CUSTCARD%ROWTYPE;
    N INT;
    NO_CARD EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO N
    FROM CUSTCARD
    WHERE IDCUSTOMER = CUST AND DATEOFEXPIRE < SYSDATE();

    IF N = 0
    THEN 
        RAISE NO_CARD;
    ELSE
    OPEN FIND_CUSTCARD;
        LOOP 
            FETCH FIND_CUSTCARD INTO X;
            EXIT WHEN FIND_CUSTCARD%NOTFOUND; 
            DBMS_OUTPUT.PUT_LINE('1 CARD FOR THIS CUSTOMER IS EXPIRED');
            INSERT INTO CARDHISTORY
            VALUES (X.IDCARD, X.TYPEOFCARD, X.IDCUSTOMER, X.DATEOFISSUE, X.DATEOFEXPIRE);
            DELETE FROM CUSTCARD
            WHERE IDCARD = X.IDCARD;
        END LOOP;
    CLOSE FIND_CUSTCARD;
    END IF;
    
    EXCEPTION
    WHEN NO_CARD THEN DBMS_OUTPUT.PUT_LINE('NO EXPIRED CARD FOR THIS CUSTOMER');     
END;
/

CREATE OR REPLACE TRIGGER ADD_SALE_ORDER_TRIGGER
BEFORE INSERT ON SALEORDER
FOR EACH ROW
BEGIN
    EXPIRED_CUSTCARD_PROCEDURE(:NEW.IDCUSTOMER);
END;
/

INSERT INTO CustCard VALUES (1101, 'Bronze', 1001, TO_DATE('2018-01-01'), TO_DATE('2020-01-01'));
INSERT INTO CustCard VALUES (1105, 'Bronze', 1001, TO_DATE('2018-01-01'), TO_DATE('2018-02-01'));

EXECUTE EXPIRED_CUSTCARD_PROCEDURE(1001);

SELECT * FROM CUSTCARD;
SELECT * FROM CARDHISTORY;
SELECT * FROM SALEORDER;

INSERT INTO SaleOrder 
VALUES (3008, 1001, 2002, TO_DATE('2019-01-07'), TO_DATE('2019-04-22'), 10.00, 'Wilanowska 10', 'WA');

DELETE FROM CARDHISTORY;
DELETE FROM SALEORDER WHERE IDSALEORDER = 3008;
--------------------------------------------




